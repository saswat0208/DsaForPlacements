//pair difference
int solve(vector<int> &v , int B)
{
    sort(v.begin(),v.end());
    
    int i = 0 ; 
    int j = 1;
    //think of negative no. solution will arise
    while(i < A.size() && j < B.size())
    {
        int dif = v[j] - v[i];
        if(i!= j && dif == B)
            return true;
        if(dif > B)
        {
            j--;
        }
        if(dif < B)
        {
            i++;
        }
    }
    return false;
}

//3 sum

int solve(vector<int> &v , int B)
{
    solve(v.begin() , v.end());
    
    int i , j;
    int ans = INT_MAX;
    int sum = 0;
    int nearness = INT_MIN;
    for(int k = 0 ;  k < v.size() -1 ; k++)
    {
        i = k + 1;
        j = v.size() - 1;
        
        while(i < j)
        {
            sum = A[k] + A[i] + A[j];
            
            if(B - sum < nearness)
            {
                ans = sum;
                nearness = B-ans;
                i++;
            }
            else
            {
                j--;
            }
            
        }
    }
    return ans;
}
  

//  counting triangles
int solve(vector<int> &v)
{
    int mod = 1e9+7;
    sort(v.begin(),v.end());
    
    int ans = 0;
    
    for(i >= A.size()-1 ; i>= 0 ; i--)
    {
        int j = 0 , k = i-1;
        if(A[j] <= 0 )
            continue;
        
        while(j < k)
        {
            int sum = A[j] + A[k];
            if(sum > A[i])
            {
                ans += (k - j);
                k--;
            }
            else
            {
                j++;
            }
        }
        
        ans = ans % mod;
    }
    return ans;
}


//diffk
int solve(vector<int>v, int k)
{
    sort(v.begin(),v.end());
    int i = 0 , j = 1;
    
    while(i < v.size() && j < v.size())
    {
        if(A[j] - A[i] == k)
            return true;
        if(i != j && A[j] - A[i] < k)
        {
            i++;
        }
        else
        {
            j--;
        }
    }
    return false;
}

//maximum ones after Modification
int solve(vector<int> &v , int B)
{
    int n = v.size();
    int i = 0 , j = 0;
    int res = 0;
    int count = 0;
    while(i < n && j < n)
    {
        if(v[j] == 1)
        {
            count++;
            j++;
        }
        else if(v[j] == 0)
        {
            if(B > 0)
            {
                B--;
                count++;
                j++;
            }
            else
            {
                while(v[i] != 0)
                {
                    B++;
                    i++
                }
                count--;
            }
        }
        
        res = max(count,res);
    }
    return res;
}

//maximum ones after Modification

int Solution::solve(vector<int> &v, int B) {
    
    //longest sequence of 1's with B 0's
    
   // [ 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0 ]
    int count1=0 , count0 = 0;
    int i = 0 , j = 0 , max = INT_MIN;
    while(i < A.size() && j <= i)//[ 0, 0, 0, 0, 0, 1, 1, 1, 1, 1 ]
    {
        if(A[i] == 1){
            count1+=1;
        }
        else
        { 
            if(count0+1 > B)
            {
                while(A[j] == 1)
                {
                    j++;
                    count1-=1;
                }
                
                j++;
            }
            else
                count0 += 1;
            
                
            
        }
        
        if(count1+count0 > max)
        {
            max = count1+count0;
        }
        i++;
        
    }
    return max;
}


//Max Continuous Series of 1s
int solve(vector<int> &v , int m)
{
    int count0 = 0;
    int curleft = 0 , curright = 0;
    int maxleft = 0 , maxright = 0;
    
    for(int i = 0 ; i < v.size() ; i++)
    {
        if(count0 <= m)
        {
            if(v[i] == 0)
                count0++;
            curright++;
        }
        if(count0 > m)
        {
            while(v[curleft] == 1)
            {
                curleft++;
            }
            count0--;
            curtleft++;
        }
        
        if(curright-curleft > maxright - maxleft)
        {
            curleft = maxleft;
            curright = maxright;
        }
    }
    vector<int> res;
    for(int i = curleft ; i <= curright ; i++)
    {
        res.push_back(i);
    }
    return res;
}

// remove duplicate

int solve(vector<int> &v)
{
    int i = 0 , j = 1;
    while(j < v.size())
    {
        if(v[i] == v[j])
        {
            j++;
            continue;
        }
        else
        {
            v[i+1] = v[j];
            i++;
            j++;
        }
    }
    return i;
}

//dutch falg problem

int solve(vector<int> &v)
{
    int i = 0 , j = v.size() - 1 , k = 0;
    
    while(k < j)
    {
       if(A[k] == 0)
       {
           if(i == k)
                k++;
            else
            {
                swap(A[k],A[i]);
                i++;
            }
       }
       else if(A[k] == 2)
       {
          swap(A[k] , A[j]);
          j--
       }
       else
       {
           k++;
       }
    }
}
